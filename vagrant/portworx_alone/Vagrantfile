servers = [
    {
        :name => "standalone",
        :box => "ubuntu/bionic64",
        :eth1 => "192.168.206.10",
        :mem => "2048",
        :cpu => "2"
    }
  ]

$install = <<-SCRIPT

    curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
    apt-get update && apt-get install -y docker.io 
    systemctl enable docker.service
    usermod -aG docker vagrant
    export IP=$(hostname -I | awk '{print $1}')

    docker run -d --net=host -p 4001:2379 \
    --volume=/var/lib/px-etcd:/etcd-data \
    --name etcd quay.io/coreos/etcd /usr/local/bin/etcd \
    --data-dir=/etcd-data --name node1 \
    --advertise-client-urls http://${IP}:4001 \
    --listen-client-urls http://${IP}:4001 \
    --initial-advertise-peer-urls http://${IP}:2380 \
    --listen-peer-urls http://${IP}:2380 \
    --initial-cluster node1=http://${IP}:2380

    latest_stable=$(curl -fsSL "https://install.portworx.com/?type=dock&stork=false" | awk '/image: / {print $2}')
    
    docker run --entrypoint /runc-entry-point.sh \
    --rm -i --privileged=true \
    -v /opt/pwx:/opt/pwx -v /etc/pwx:/etc/pwx \
    $latest_stable

    export IP=$(hostname -I | awk '{print $1}')

    /opt/pwx/bin/px-runc install -c demo-px-cluster \
    -k etcd://${IP}:4001 \
    -s /dev/sdc

    systemctl daemon-reload
    systemctl enable portworx
    systemctl start portworx

  SCRIPT

file_to_disk = './tmp/large_disk.vdi'


Vagrant.configure("2") do |config|
  servers.each do |opts|
    config.vm.define opts[:name] do |config|

      config.vm.box = opts[:box]

      config.vm.box_check_update = false

      config.vm.network "private_network", ip: opts[:eth1]

      
      config.vm.provider "virtualbox" do |vb|
        vb.gui = false
        vb.cpus = opts[:cpu]
        vb.memory = opts[:mem]
        unless File.exist?(file_to_disk)
          vb.customize ['createhd', '--filename', file_to_disk, '--size', 20 * 1024]
        end
        vb.customize ['storageattach', :id, '--storagectl', 'SCSI', '--port', 2, '--device', 0, '--type', 'hdd', '--medium', file_to_disk]

      end
  
      config.vm.provision "shell", inline: $install
    end
  end
  
end